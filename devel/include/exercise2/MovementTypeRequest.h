// Generated by gencpp from file exercise2/MovementTypeRequest.msg
// DO NOT EDIT!


#ifndef EXERCISE2_MESSAGE_MOVEMENTTYPEREQUEST_H
#define EXERCISE2_MESSAGE_MOVEMENTTYPEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace exercise2
{
template <class ContainerAllocator>
struct MovementTypeRequest_
{
  typedef MovementTypeRequest_<ContainerAllocator> Type;

  MovementTypeRequest_()
    : shape()
    , duration(0)  {
    }
  MovementTypeRequest_(const ContainerAllocator& _alloc)
    : shape(_alloc)
    , duration(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _shape_type;
  _shape_type shape;

   typedef int32_t _duration_type;
  _duration_type duration;





  typedef boost::shared_ptr< ::exercise2::MovementTypeRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::exercise2::MovementTypeRequest_<ContainerAllocator> const> ConstPtr;

}; // struct MovementTypeRequest_

typedef ::exercise2::MovementTypeRequest_<std::allocator<void> > MovementTypeRequest;

typedef boost::shared_ptr< ::exercise2::MovementTypeRequest > MovementTypeRequestPtr;
typedef boost::shared_ptr< ::exercise2::MovementTypeRequest const> MovementTypeRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::exercise2::MovementTypeRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::exercise2::MovementTypeRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::exercise2::MovementTypeRequest_<ContainerAllocator1> & lhs, const ::exercise2::MovementTypeRequest_<ContainerAllocator2> & rhs)
{
  return lhs.shape == rhs.shape &&
    lhs.duration == rhs.duration;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::exercise2::MovementTypeRequest_<ContainerAllocator1> & lhs, const ::exercise2::MovementTypeRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace exercise2

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::exercise2::MovementTypeRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::exercise2::MovementTypeRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::exercise2::MovementTypeRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::exercise2::MovementTypeRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::exercise2::MovementTypeRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::exercise2::MovementTypeRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::exercise2::MovementTypeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f6931f5ad45d359f8a33a0c8c7b70720";
  }

  static const char* value(const ::exercise2::MovementTypeRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf6931f5ad45d359fULL;
  static const uint64_t static_value2 = 0x8a33a0c8c7b70720ULL;
};

template<class ContainerAllocator>
struct DataType< ::exercise2::MovementTypeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "exercise2/MovementTypeRequest";
  }

  static const char* value(const ::exercise2::MovementTypeRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::exercise2::MovementTypeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string shape\n"
"int32 duration\n"
;
  }

  static const char* value(const ::exercise2::MovementTypeRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::exercise2::MovementTypeRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.shape);
      stream.next(m.duration);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MovementTypeRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::exercise2::MovementTypeRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::exercise2::MovementTypeRequest_<ContainerAllocator>& v)
  {
    s << indent << "shape: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.shape);
    s << indent << "duration: ";
    Printer<int32_t>::stream(s, indent + "  ", v.duration);
  }
};

} // namespace message_operations
} // namespace ros

#endif // EXERCISE2_MESSAGE_MOVEMENTTYPEREQUEST_H
