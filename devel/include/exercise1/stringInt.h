// Generated by gencpp from file exercise1/stringInt.msg
// DO NOT EDIT!


#ifndef EXERCISE1_MESSAGE_STRINGINT_H
#define EXERCISE1_MESSAGE_STRINGINT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace exercise1
{
template <class ContainerAllocator>
struct stringInt_
{
  typedef stringInt_<ContainerAllocator> Type;

  stringInt_()
    : content()
    , sequenceID(0)  {
    }
  stringInt_(const ContainerAllocator& _alloc)
    : content(_alloc)
    , sequenceID(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _content_type;
  _content_type content;

   typedef int8_t _sequenceID_type;
  _sequenceID_type sequenceID;





  typedef boost::shared_ptr< ::exercise1::stringInt_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::exercise1::stringInt_<ContainerAllocator> const> ConstPtr;

}; // struct stringInt_

typedef ::exercise1::stringInt_<std::allocator<void> > stringInt;

typedef boost::shared_ptr< ::exercise1::stringInt > stringIntPtr;
typedef boost::shared_ptr< ::exercise1::stringInt const> stringIntConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::exercise1::stringInt_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::exercise1::stringInt_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::exercise1::stringInt_<ContainerAllocator1> & lhs, const ::exercise1::stringInt_<ContainerAllocator2> & rhs)
{
  return lhs.content == rhs.content &&
    lhs.sequenceID == rhs.sequenceID;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::exercise1::stringInt_<ContainerAllocator1> & lhs, const ::exercise1::stringInt_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace exercise1

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::exercise1::stringInt_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::exercise1::stringInt_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::exercise1::stringInt_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::exercise1::stringInt_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::exercise1::stringInt_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::exercise1::stringInt_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::exercise1::stringInt_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0ea9fbf91a022147e4b89365a664c9cb";
  }

  static const char* value(const ::exercise1::stringInt_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0ea9fbf91a022147ULL;
  static const uint64_t static_value2 = 0xe4b89365a664c9cbULL;
};

template<class ContainerAllocator>
struct DataType< ::exercise1::stringInt_<ContainerAllocator> >
{
  static const char* value()
  {
    return "exercise1/stringInt";
  }

  static const char* value(const ::exercise1::stringInt_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::exercise1::stringInt_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string content\n"
"int8 sequenceID\n"
;
  }

  static const char* value(const ::exercise1::stringInt_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::exercise1::stringInt_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.content);
      stream.next(m.sequenceID);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct stringInt_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::exercise1::stringInt_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::exercise1::stringInt_<ContainerAllocator>& v)
  {
    s << indent << "content: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.content);
    s << indent << "sequenceID: ";
    Printer<int8_t>::stream(s, indent + "  ", v.sequenceID);
  }
};

} // namespace message_operations
} // namespace ros

#endif // EXERCISE1_MESSAGE_STRINGINT_H
