// Generated by gencpp from file exercise1/sum_of_arrayRequest.msg
// DO NOT EDIT!


#ifndef EXERCISE1_MESSAGE_SUM_OF_ARRAYREQUEST_H
#define EXERCISE1_MESSAGE_SUM_OF_ARRAYREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace exercise1
{
template <class ContainerAllocator>
struct sum_of_arrayRequest_
{
  typedef sum_of_arrayRequest_<ContainerAllocator> Type;

  sum_of_arrayRequest_()
    : array()  {
    }
  sum_of_arrayRequest_(const ContainerAllocator& _alloc)
    : array(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<int8_t, typename ContainerAllocator::template rebind<int8_t>::other >  _array_type;
  _array_type array;





  typedef boost::shared_ptr< ::exercise1::sum_of_arrayRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::exercise1::sum_of_arrayRequest_<ContainerAllocator> const> ConstPtr;

}; // struct sum_of_arrayRequest_

typedef ::exercise1::sum_of_arrayRequest_<std::allocator<void> > sum_of_arrayRequest;

typedef boost::shared_ptr< ::exercise1::sum_of_arrayRequest > sum_of_arrayRequestPtr;
typedef boost::shared_ptr< ::exercise1::sum_of_arrayRequest const> sum_of_arrayRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::exercise1::sum_of_arrayRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::exercise1::sum_of_arrayRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::exercise1::sum_of_arrayRequest_<ContainerAllocator1> & lhs, const ::exercise1::sum_of_arrayRequest_<ContainerAllocator2> & rhs)
{
  return lhs.array == rhs.array;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::exercise1::sum_of_arrayRequest_<ContainerAllocator1> & lhs, const ::exercise1::sum_of_arrayRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace exercise1

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::exercise1::sum_of_arrayRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::exercise1::sum_of_arrayRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::exercise1::sum_of_arrayRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::exercise1::sum_of_arrayRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::exercise1::sum_of_arrayRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::exercise1::sum_of_arrayRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::exercise1::sum_of_arrayRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e243aba2efc0cc55e002c10fece0b044";
  }

  static const char* value(const ::exercise1::sum_of_arrayRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe243aba2efc0cc55ULL;
  static const uint64_t static_value2 = 0xe002c10fece0b044ULL;
};

template<class ContainerAllocator>
struct DataType< ::exercise1::sum_of_arrayRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "exercise1/sum_of_arrayRequest";
  }

  static const char* value(const ::exercise1::sum_of_arrayRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::exercise1::sum_of_arrayRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8[] array\n"
;
  }

  static const char* value(const ::exercise1::sum_of_arrayRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::exercise1::sum_of_arrayRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.array);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct sum_of_arrayRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::exercise1::sum_of_arrayRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::exercise1::sum_of_arrayRequest_<ContainerAllocator>& v)
  {
    s << indent << "array[]" << std::endl;
    for (size_t i = 0; i < v.array.size(); ++i)
    {
      s << indent << "  array[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.array[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // EXERCISE1_MESSAGE_SUM_OF_ARRAYREQUEST_H
