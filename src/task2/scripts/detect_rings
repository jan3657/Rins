#!/usr/bin/python3

import sys
import rospy
import cv2
import numpy as np
import tf2_geometry_msgs
import tf2_ros
from sensor_msgs.msg import Image
from geometry_msgs.msg import PointStamped, Vector3, Pose, PoseStamped
from cv_bridge import CvBridge, CvBridgeError
from visualization_msgs.msg import Marker, MarkerArray
from std_msgs.msg import ColorRGBA
from std_msgs.msg import String
from task2.msg import Ring

class The_Ring:
    def __init__(self):
        rospy.init_node('image_converter', anonymous=True)

        # An object we use for converting images between ROS format and OpenCV format
        self.bridge = CvBridge()

        # A help variable for holding the dimensions of the image
        self.dims = (0, 0, 0)

        # Marker array object used for visualizations
        self.marker_array = MarkerArray()
        self.marker_num = 1

        self.rings = list()

        # Subscribe to the image and/or depth topic
        #self.image_sub = rospy.Subscriber("/camera/rgb/image_raw", Image, self.image_callback)
        self.depth_sub = rospy.Subscriber(
            "/camera/depth/image_raw", Image, self.depth_callback)

        # Object we use for transforming between coordinate frames
        self.tf_buf = tf2_ros.Buffer()
        self.tf_listener = tf2_ros.TransformListener(self.tf_buf)

    def get_pose(self, e, dist):
        # Calculate the position of the detected ellipse

        k_f = 525  # kinect focal length in pixels

        elipse_x = self.dims[1] / 2 - e[0][0]
        elipse_y = self.dims[0] / 2 - e[0][1]

        angle_to_target = np.arctan2(elipse_x, k_f)

        # Get the angles in the base_link relative coordinate system
        x, y = dist*np.cos(angle_to_target), dist*np.sin(angle_to_target)

        ### Define a stamped message for transformation - directly in "base_frame"
        #point_s = PointStamped()
        #point_s.point.x = x
        #point_s.point.y = y
        #point_s.point.z = 0.3
        #point_s.header.frame_id = "base_link"
        #point_s.header.stamp = rospy.Time(0)

        # Define a stamped message for transformation - in the "camera rgb frame"
        point_s = PointStamped()
        point_s.point.x = -y
        point_s.point.y = 0
        point_s.point.z = x
        point_s.header.frame_id = "camera_rgb_optical_frame"
        point_s.header.stamp = rospy.Time(0)

        # Get the point in the "map" coordinate system
        point_world = self.tf_buf.transform(point_s, "map")

        # Create a Pose object with the same position
        pose_stamped = PoseStamped()
        pose_stamped.pose.position.x = point_world.point.x
        pose_stamped.pose.position.y = point_world.point.y
        pose_stamped.pose.position.z = point_world.point.z
        pose_stamped.header.frame_id = "camera_rgb_optical_frame"
        pose_stamped.header.stamp = rospy.Time(0)

        return point_world, pose_stamped

    def depth_callback(self, data):
        #print('I got a new image!')

        try:
            cv_image = self.bridge.imgmsg_to_cv2(data, "32FC1")
            depth_16u = self.bridge.imgmsg_to_cv2(data, "16UC1")
        except CvBridgeError as e:
            print(e)

        image_1 = depth_16u / 65536.0 * 255
        image_1 = image_1/np.max(image_1)*255

        image_viz = np.array(image_1, dtype=np.uint8)
        # Set the dimensions of the image
        self.dims = image_viz.shape

        # Tranform image to gayscale
        #gray = cv2.cvtColor(cv_image, cv2.COLOR_BGR2GRAY)

        # Do histogram equlization
        #img = cv2.equalizeHist(gray)

        # Binarize the image, there are different ways to do it
        #ret, thresh = cv2.threshold(img, 50, 255, 0)
        ret, thresh = cv2.threshold(image_viz, 70, 255, cv2.THRESH_BINARY)
        #thresh = cv2.adaptiveThreshold(img, 255, cv2.ADAPTIVE_THRESH_MEAN_C, cv2.THRESH_BINARY, 15, 25)

        # Extract contours
        contours, hierarchy = cv2.findContours(
            thresh, cv2.RETR_LIST, cv2.CHAIN_APPROX_SIMPLE)

        # Example how to draw the contours, only for visualization purposes
        cv2.drawContours(image_viz, contours, -1, (255, 0, 0), 3)
        cv2.imshow("Contour window", image_viz)
        cv2.waitKey(1)

        # Fit elipses to all extracted contours
        elps = []
        for cnt in contours:
            #     print cnt
            #     print cnt.shape
            if cnt.shape[0] >= 20:
                ellipse = cv2.fitEllipse(cnt)
                elps.append(ellipse)

        # Find two elipses with same centers
        candidates = []
        for n in range(len(elps)):
            for m in range(n + 1, len(elps)):
                e1 = elps[n]
                e2 = elps[m]
                dist = np.sqrt(
                    ((e1[0][0] - e2[0][0]) ** 2 + (e1[0][1] - e2[0][1]) ** 2))
                #             print dist
                if dist < 5:
                    candidates.append((e1, e2))

        # Extract the depth from the depth image
        for c in candidates:

            # the centers of the ellipses
            e1 = c[0]
            e2 = c[1]

            # drawing the ellipses on the image
            cv2.ellipse(image_viz, e1, (0, 255, 0), 2)
            cv2.ellipse(image_viz, e2, (0, 255, 0), 2)

            size = (e1[1][0]+e1[1][1])/2
            center = (e1[0][1], e1[0][0])

            x1 = int(center[0] - size / 2)
            x2 = int(center[0] + size / 2)
            x_min = x1 if x1 > 0 else 0
            x_max = x2 if x2 < image_viz.shape[0] else image_viz.shape[0]

            y1 = int(center[1] - size / 2)
            y2 = int(center[1] + size / 2)
            y_min = y1 if y1 > 0 else 0
            y_max = y2 if y2 < image_viz.shape[1] else image_viz.shape[1]

            #depth_image = self.bridge.imgmsg_to_cv2(depth_img, "16UC1")
            #depth_image = self.bridge.imgmsg_to_cv2(depth_img, "32FC1")

            #self.get_pose(e1, float(np.mean(depth_image[x_min:x_max,y_min:y_max]))/1000.0)
            point_world, pose_stamped = self.get_pose(
                e1, float(np.nanmean(cv_image[x_min:x_max, y_min:y_max])))



        if len(candidates) > 0:
            cv2.imshow("Image window", image_viz)
            cv2.waitKey(1)
            #Dubi barvu
            try:
                coloured_img_msg = rospy.wait_for_message(
                    '/camera/rgb/image_raw', Image)
                coloured_img = self.bridge.imgmsg_to_cv2(coloured_img_msg, "bgr8")

            except CvBridgeError as e:
                print(e)

            m1 = np.zeros(coloured_img.shape[0:2], np.uint8)
            m2 = np.zeros(coloured_img.shape[0:2], np.uint8)

            m1 = cv2.ellipse(m1, e1, (255, 255, 255), -1)
            m2 = cv2.ellipse(m2, e2, (255, 255, 255), -1)

            m3 = m2 - m1

            bgr_color = cv2.mean(coloured_img, mask=m3)[:-1]

            #RGB to colour name
            rgb_color = bgr_color[::-1]
            min = np.min(rgb_color)
            limit = 20

            rNormalized = rgb_color[0]-min
            gNormalized = rgb_color[1]-min
            bNormalized = rgb_color[2]-min
            #print(rgb_color)

            if(rNormalized < limit and gNormalized < limit and bNormalized < limit):
                colour = "grey"
            elif(rNormalized == 0):
                if (gNormalized > bNormalized):
                    colour = "green" if gNormalized - bNormalized > limit else "cyan"
                else:
                    colour = "blue" if bNormalized - gNormalized > limit else "cyan"
            elif(gNormalized == 0):
                if (rNormalized > bNormalized):
                    colour = "red" if rNormalized - bNormalized > limit else "magenta"
                else:
                    colour = "blue" if bNormalized - rNormalized > limit else "magenta"
            elif(bNormalized == 0):
                if (gNormalized > rNormalized):
                    colour = "green" if gNormalized - rNormalized > limit else "yellow"
                else:
                    colour = "red" if rNormalized - gNormalized > limit else "yellow"
            else:
                colour = "idk"

            #publish the ring
            
            ringMsg = Ring()
            ringMsg.position = pose_stamped
            ringMsg.color = colour
            #print(type(pose_stamped))
            ring_publisher = rospy.Publisher('detected_ring', Ring, queue_size=1)
            ring_publisher.publish(ringMsg)


def main():

    ring_finder = The_Ring()

    try:
        rospy.spin()
    except KeyboardInterrupt:
        print("Shutting down")

    cv2.destroyAllWindows()


if __name__ == '__main__':
    main()
